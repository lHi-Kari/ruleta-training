<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Entrenamiento Croupier Avanzado - Ruleta Casino</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0f1419 0%, #1a3a2e 50%, #16423c 100%);
            color: #fff;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #ffd700;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.3);
            max-width: 900px;
            width: 90%;
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .title {
            font-size: 2.5em;
            color: #ffd700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            margin-bottom: 10px;
        }

        .subtitle {
            font-size: 1.2em;
            color: #cccccc;
            margin-bottom: 20px;
        }

        /* Selector de modo */
        .mode-selector {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        .mode-btn {
            background: rgba(255, 215, 0, 0.2);
            border: 2px solid #ffd700;
            color: #ffd700;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .mode-btn.active {
            background: #ffd700;
            color: #000;
        }

        .mode-btn:hover {
            transform: translateY(-2px);
        }

        /* Timer específico */
        .timer-container {
            text-align: center;
            margin-bottom: 20px;
            display: none;
        }

        .timer-container.active {
            display: block;
        }

        .timer {
            font-size: 3em;
            color: #ffd700;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            margin-bottom: 10px;
        }

        .timer.warning {
            color: #ff9800;
            animation: pulse-warning 1s infinite;
        }

        .timer.danger {
            color: #f44336;
            animation: pulse-danger 0.5s infinite;
        }

        @keyframes pulse-warning {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes pulse-danger {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4caf50, #ffd700, #f44336);
            transition: width 0.1s linear;
            border-radius: 4px;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
            background: rgba(255, 215, 0, 0.1);
            padding: 15px;
            border-radius: 10px;
        }

        .stat {
            text-align: center;
        }

        .stat-value {
            font-size: 1.8em;
            color: #ffd700;
            font-weight: bold;
        }

        .stat-label {
            color: #cccccc;
            font-size: 0.9em;
        }

        .game-area {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
        }

        .exercise {
            background: linear-gradient(45deg, #2c5530, #1e3a22);
            border: 2px solid #4caf50;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .exercise-title {
            font-size: 1.4em;
            color: #4caf50;
            margin-bottom: 15px;
            text-align: center;
        }

        .bet-breakdown {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .bet-item {
            background: rgba(76, 175, 80, 0.2);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #4caf50;
        }

        .bet-type {
            font-weight: bold;
            color: #ffd700;
            font-size: 1.1em;
        }

        .bet-details {
            color: #cccccc;
            margin-top: 5px;
        }

        .answer-section {
            text-align: center;
            margin: 20px 0;
        }

        .answer-input {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #ffd700;
            border-radius: 10px;
            padding: 15px 20px;
            font-size: 1.5em;
            color: #fff;
            width: 200px;
            text-align: center;
            margin: 0 10px;
        }

        .answer-input:focus {
            outline: none;
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
        }

        .answer-input:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn {
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            color: #000;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 215, 0, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn-success {
            background: linear-gradient(45deg, #4caf50, #81c784);
        }

        .btn-danger {
            background: linear-gradient(45deg, #f44336, #ef5350);
            color: white;
        }

        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            font-size: 1.2em;
            font-weight: bold;
        }

        .result.correct {
            background: rgba(76, 175, 80, 0.3);
            border: 2px solid #4caf50;
            color: #4caf50;
        }

        .result.incorrect {
            background: rgba(244, 67, 54, 0.3);
            border: 2px solid #f44336;
            color: #f44336;
        }

        .result.timeout {
            background: rgba(255, 152, 0, 0.3);
            border: 2px solid #ff9800;
            color: #ff9800;
        }

        .explanation {
            background: rgba(255, 215, 0, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            border-left: 4px solid #ffd700;
        }

        .controls {
            text-align: center;
            margin-top: 20px;
        }

        /* Configuración del cronómetro */
        .timer-config {
            background: rgba(255, 215, 0, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
        }

        .timer-config.active {
            display: block;
        }

        .timer-config h3 {
            color: #ffd700;
            margin-bottom: 15px;
            text-align: center;
        }

        .config-group {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 15px;
        }

        .config-item {
            text-align: center;
        }

        .config-item label {
            display: block;
            color: #cccccc;
            margin-bottom: 5px;
        }

        .config-item input, .config-item select {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #ffd700;
            border-radius: 8px;
            padding: 8px 12px;
            color: #fff;
            width: 100px;
        }

        /* Animaciones */
        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .celebration {
            animation: celebration 0.6s ease-in-out;
        }

        @keyframes celebration {
            0% { transform: scale(1) rotate(0deg); }
            25% { transform: scale(1.1) rotate(-5deg); }
            50% { transform: scale(1.2) rotate(5deg); }
            75% { transform: scale(1.1) rotate(-2deg); }
            100% { transform: scale(1) rotate(0deg); }
        }

        .shake {
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }

        /* Leaderboard */
        .leaderboard {
            background: rgba(255, 215, 0, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            display: none;
        }

        .leaderboard.active {
            display: block;
        }

        .leaderboard h3 {
            color: #ffd700;
            text-align: center;
            margin-bottom: 15px;
        }

        .record-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 215, 0, 0.3);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">🎰 ENTRENAMIENTO CROUPIER AVANZADO 🎰</h1>
            <p class="subtitle">Práctica de Cálculo de Pagos - Ruleta Casino</p>
        </div>

        <!-- Selector de modo -->
        <div class="mode-selector">
            <button class="mode-btn active" onclick="setMode('practice')">🎯 Práctica Libre</button>
            <button class="mode-btn" onclick="setMode('timed')">⏱️ Modo Cronómetro</button>
            <button class="mode-btn" onclick="setMode('challenge')">🔥 Desafío Rápido</button>
        </div>

        <!-- Configuración del cronómetro -->
        <div class="timer-config" id="timerConfig">
            <h3>⚙️ Configuración del Cronómetro</h3>
            <div class="config-group">
                <div class="config-item">
                    <label>Tiempo por pregunta (seg)</label>
                    <input type="number" id="timePerQuestion" value="30" min="10" max="120">
                </div>
                <div class="config-item">
                    <label>Número de preguntas</label>
                    <input type="number" id="totalQuestions" value="10" min="5" max="50">
                </div>
                <div class="config-item">
                    <label>Dificultad</label>
                    <select id="difficulty">
                        <option value="easy">Fácil (1-2 apuestas)</option>
                        <option value="medium">Medio (2-3 apuestas)</option>
                        <option value="hard">Difícil (3-4 apuestas)</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Cronómetro -->
        <div class="timer-container" id="timerContainer">
            <div class="timer" id="timer">30</div>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div style="color: #cccccc; font-size: 1.1em;">
                Pregunta <span id="currentQuestion">1</span> de <span id="totalQuestionsDisplay">10</span>
            </div>
        </div>

        <div class="stats">
            <div class="stat">
                <div class="stat-value" id="score">0</div>
                <div class="stat-label">Puntuación</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="streak">0</div>
                <div class="stat-label">Racha</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="level">1</div>
                <div class="stat-label">Nivel</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="accuracy">100%</div>
                <div class="stat-label">Precisión</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="avgTime">0s</div>
                <div class="stat-label">Tiempo Promedio</div>
            </div>
        </div>

        <div class="game-area">
            <div class="exercise" id="exercise">
                <div class="exercise-title">💰 Calcula el pago total de esta jugada:</div>
                <div class="bet-breakdown" id="betBreakdown">
                    <!-- Las apuestas se generarán aquí -->
                </div>
                
                <div class="answer-section">
                    <label for="answer" style="color: #ffd700; font-size: 1.2em; margin-right: 10px;">Tu respuesta:</label>
                    <input type="number" id="answer" class="answer-input" placeholder="000" min="0">
                    <div style="margin-top: 15px;">
                        <button class="btn" id="checkBtn" onclick="checkAnswer()">✓ Verificar</button>
                        <button class="btn" onclick="showSolution()">💡 Ver Solución</button>
                        <button class="btn btn-danger" id="skipBtn" onclick="skipQuestion()" style="display: none;">⏭️ Saltar</button>
                    </div>
                </div>

                <div id="result" class="result" style="display: none;"></div>
                <div id="explanation" class="explanation" style="display: none;"></div>
            </div>

            <div class="controls">
                <button class="btn btn-success" onclick="generateNewExercise()">🎲 Nuevo Ejercicio</button>
                <button class="btn" onclick="resetStats()">🔄 Reiniciar</button>
                <button class="btn" onclick="toggleLeaderboard()">🏆 Records</button>
                <button class="btn" id="startChallengeBtn" onclick="startTimedChallenge()" style="display: none;">🚀 Iniciar Desafío</button>
            </div>
        </div>

        <!-- Leaderboard -->
        <div class="leaderboard" id="leaderboard">
            <h3>🏆 Mejores Puntuaciones</h3>
            <div id="recordsList">
                <!-- Los records se mostrarán aquí -->
            </div>
        </div>

        <div style="text-align: center; color: #888; font-size: 0.9em; margin-top: 20px;">
            <p><strong>Valores de pago:</strong> Pleno (35:1) | Medio (17:1) | Calle (11:1) | Cuadro (8:1)</p>
        </div>
    </div>

    <script>
        let currentExercise = {};
        let gameMode = 'practice';
        let timerInterval;
        let currentTime = 30;
        let maxTime = 30;
        let questionStartTime;
        let challengeActive = false;
        let questionCount = 0;
        let maxQuestions = 10;
        
        let stats = {
            score: 0,
            streak: 0,
            level: 1,
            totalQuestions: 0,
            correctAnswers: 0,
            totalTime: 0,
            bestScore: localStorage.getItem('bestScore') || 0,
            records: JSON.parse(localStorage.getItem('records') || '[]')
        };

        const betTypes = {
            pleno: { name: 'Pleno', payout: 35, color: '#ff6b6b' },
            medio: { name: 'Medio', payout: 17, color: '#4ecdc4' },
            calle: { name: 'Calle', payout: 11, color: '#45b7d1' },
            cuadro: { name: 'Cuadro', payout: 8, color: '#96ceb4' }
        };

        function setMode(mode) {
            gameMode = mode;
            
            // Actualizar botones
            document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Mostrar/ocultar elementos según el modo
            const timerContainer = document.getElementById('timerContainer');
            const timerConfig = document.getElementById('timerConfig');
            const startBtn = document.getElementById('startChallengeBtn');
            const skipBtn = document.getElementById('skipBtn');
            
            switch(mode) {
                case 'practice':
                    timerContainer.classList.remove('active');
                    timerConfig.classList.remove('active');
                    startBtn.style.display = 'none';
                    skipBtn.style.display = 'none';
                    challengeActive = false;
                    clearInterval(timerInterval);
                    break;
                    
                case 'timed':
                    timerContainer.classList.add('active');
                    timerConfig.classList.add('active');
                    startBtn.style.display = 'inline-block';
                    skipBtn.style.display = 'inline-block';
                    challengeActive = false;
                    break;
                    
                case 'challenge':
                    timerContainer.classList.add('active');
                    timerConfig.classList.add('active');
                    startBtn.style.display = 'inline-block';
                    skipBtn.style.display = 'inline-block';
                    challengeActive = false;
                    // Configuración predeterminada para desafío
                    document.getElementById('timePerQuestion').value = 20;
                    document.getElementById('totalQuestions').value = 15;
                    document.getElementById('difficulty').value = 'hard';
                    break;
            }
            
            if (mode !== 'practice') {
                updateTimerConfig();
            }
        }

        function updateTimerConfig() {
            maxTime = parseInt(document.getElementById('timePerQuestion').value);
            maxQuestions = parseInt(document.getElementById('totalQuestions').value);
            document.getElementById('totalQuestionsDisplay').textContent = maxQuestions;
        }

        function startTimedChallenge() {
            challengeActive = true;
            questionCount = 0;
            stats.totalTime = 0;
            updateTimerConfig();
            generateNewExercise();
            startTimer();
            
            // Deshabilitar configuración durante el desafío
            document.getElementById('timerConfig').style.opacity = '0.5';
            document.getElementById('startChallengeBtn').textContent = '🛑 Detener Desafío';
            document.getElementById('startChallengeBtn').onclick = stopChallenge;
        }

        function stopChallenge() {
            challengeActive = false;
            clearInterval(timerInterval);
            
            // Mostrar resultado final
            showChallengeResults();
            
            // Rehabilitar configuración
            document.getElementById('timerConfig').style.opacity = '1';
            document.getElementById('startChallengeBtn').textContent = '🚀 Iniciar Desafío';
            document.getElementById('startChallengeBtn').onclick = startTimedChallenge;
        }

        function startTimer() {
            currentTime = maxTime;
            questionStartTime = Date.now();
            updateTimer();
            
            timerInterval = setInterval(() => {
                currentTime--;
                updateTimer();
                
                if (currentTime <= 0) {
                    handleTimeout();
                }
            }, 1000);
        }

        function updateTimer() {
            const timerElement = document.getElementById('timer');
            const progressFill = document.getElementById('progressFill');
            
            timerElement.textContent = currentTime;
            
            // Cambiar colores según el tiempo restante
            const percentage = (currentTime / maxTime) * 100;
            progressFill.style.width = percentage + '%';
            
            if (percentage > 50) {
                timerElement.className = 'timer';
            } else if (percentage > 25) {
                timerElement.className = 'timer warning';
            } else {
                timerElement.className = 'timer danger';
            }
        }

        function handleTimeout() {
            clearInterval(timerInterval);
            
            const resultDiv = document.getElementById('result');
            resultDiv.className = 'result timeout';
            resultDiv.innerHTML = `⏰ ¡Tiempo agotado! La respuesta correcta era ${currentExercise.totalPayout}`;
            resultDiv.style.display = 'block';
            
            document.getElementById('answer').disabled = true;
            document.getElementById('checkBtn').disabled = true;
            
            stats.totalQuestions++;
            stats.streak = 0;
            
            showSolution();
            updateStats();
            
            if (challengeActive) {
                setTimeout(() => {
                    nextChallengeQuestion();
                }, 3000);
            }
        }

        function nextChallengeQuestion() {
            questionCount++;
            document.getElementById('currentQuestion').textContent = questionCount + 1;
            
            if (questionCount >= maxQuestions) {
                stopChallenge();
                return;
            }
            
            generateNewExercise();
            startTimer();
        }

        function showChallengeResults() {
            const accuracy = stats.totalQuestions > 0 ? Math.round((stats.correctAnswers / stats.totalQuestions) * 100) : 0;
            const avgTime = stats.totalQuestions > 0 ? Math.round(stats.totalTime / stats.totalQuestions) : 0;
            
            // Guardar record si es necesario
            const newRecord = {
                date: new Date().toLocaleDateString(),
                mode: gameMode,
                score: stats.score,
                accuracy: accuracy,
                avgTime: avgTime,
                questions: maxQuestions
            };
            
            stats.records.push(newRecord);
            stats.records.sort((a, b) => b.score - a.score);
            stats.records = stats.records.slice(0, 10); // Solo mantener top 10
            
            localStorage.setItem('records', JSON.stringify(stats.records));
            
            if (stats.score > stats.bestScore) {
                stats.bestScore = stats.score;
                localStorage.setItem('bestScore', stats.bestScore);
            }
            
            alert(`🎉 ¡Desafío completado!\n\nPuntuación: ${stats.score}\nPrecisión: ${accuracy}%\nTiempo promedio: ${avgTime}s\n${stats.score > stats.bestScore ? '¡NUEVO RECORD!' : ''}`);
        }

        function generateNewExercise() {
            // Resetear estado
            document.getElementById('answer').disabled = false;
            document.getElementById('checkBtn').disabled = false;
            document.getElementById('answer').value = '';
            hideResult();
            
            // Generar apuestas según dificultad
            const difficulty = document.getElementById('difficulty').value;
            let minBets, maxBets;
            
            switch(difficulty) {
                case 'easy': minBets = 1; maxBets = 2; break;
                case 'medium': minBets = 2; maxBets = 3; break;
                case 'hard': minBets = 3; maxBets = 4; break;
                default: minBets = 1; maxBets = stats.level + 1;
            }
            
            currentExercise.bets = generateRandomBets(minBets, maxBets);
            currentExercise.totalPayout = currentExercise.bets.reduce((sum, bet) => sum + bet.total, 0);
            
            displayExercise();
            document.getElementById('answer').focus();
        }

        function generateRandomBets(minBets = 1, maxBets = 4) {
            const bets = [];
            const types = Object.keys(betTypes);
            const numBetTypes = Math.floor(Math.random() * (maxBets - minBets + 1)) + minBets;
            
            const selectedTypes = [];
            for (let i = 0; i < numBetTypes; i++) {
                let type;
                do {
                    type = types[Math.floor(Math.random() * types.length)];
                } while (selectedTypes.includes(type));
                selectedTypes.push(type);
            }

            selectedTypes.forEach(type => {
                const quantity = Math.floor(Math.random() * 5) + 1; // 1 a 5
                bets.push({
                    type: type,
                    quantity: quantity,
                    payout: betTypes[type].payout,
                    total: quantity * betTypes[type].payout
                });
            });

            return bets;
        }

        function displayExercise() {
            const breakdown = document.getElementById('betBreakdown');
            breakdown.innerHTML = '';

            currentExercise.bets.forEach(bet => {
                const betItem = document.createElement('div');
                betItem.className = 'bet-item';
                betItem.style.borderLeftColor = betTypes[bet.type].color;
                
                betItem.innerHTML = `
                    <div class="bet-type">${bet.quantity} ${betTypes[bet.type].name}${bet.quantity > 1 ? 's' : ''}</div>
                    <div class="bet-details">Paga ${betTypes[bet.type].payout}:1 cada uno</div>
                `;
                breakdown.appendChild(betItem);
            });
        }

        function checkAnswer() {
            const userAnswer = parseInt(document.getElementById('answer').value);
            const resultDiv = document.getElementById('result');
            const timeTaken = questionStartTime ? (Date.now() - questionStartTime) / 1000 : 0;
            
            clearInterval(timerInterval);
            
            stats.totalQuestions++;
            stats.totalTime += timeTaken;
            
            if (userAnswer === currentExercise.totalPayout) {
                // Respuesta correcta
                stats.correctAnswers++;
                let points = stats.level * 10;
                
                // Bonus por velocidad en modo cronómetro
                if (gameMode !== 'practice' && timeTaken < maxTime * 0.5) {
                    points *= 2;
                }
                
                stats.score += points;
                stats.streak++;
                
                // Subir de nivel cada 5 respuestas correctas consecutivas
                if (stats.streak % 5 === 0) {
                    stats.level++;
                }
                
                resultDiv.className = 'result correct';
                resultDiv.innerHTML = `🎉 ¡CORRECTO! (+${points} pts) - Tiempo: ${timeTaken.toFixed(1)}s`;
                resultDiv.parentElement.classList.add('celebration');
                setTimeout(() => resultDiv.parentElement.classList.remove('celebration'), 600);
                
            } else {
                // Respuesta incorrecta
                stats.streak = 0;
                resultDiv.className = 'result incorrect';
                resultDiv.innerHTML = `❌ Incorrecto. La respuesta correcta era ${currentExercise.totalPayout}`;
                resultDiv.parentElement.classList.add('shake');
                setTimeout(() => resultDiv.parentElement.classList.remove('shake'), 500);
            }
            
            document.getElementById('answer').disabled = true;
            document.getElementById('checkBtn').disabled = true;
            
            showSolution();
            updateStats();
            resultDiv.style.display = 'block';
            
            if (challengeActive) {
                setTimeout(() => {
                    nextChallengeQuestion();
                }, 3000);
            }
        }

        function skipQuestion() {
            if (!challengeActive) return;
            
            clearInterval(timerInterval);
            stats.totalQuestions++;
            stats.streak = 0;
            
            const resultDiv = document.getElementById('result');
            resultDiv.className = 'result timeout';
            resultDiv.innerHTML = `⏭️ Pregunta saltada. La respuesta era ${currentExercise.totalPayout}`;
            resultDiv.style.display = 'block';
            
            showSolution();
            updateStats();
            
            setTimeout(() => {
                nextChallengeQuestion();
            }, 2000);
        }

        function showSolution() {
            const explanationDiv = document.getElementById('explanation');
            let explanation = '<h4 style="color: #ffd700; margin-bottom: 10px;">💡 Explicación del cálculo:</h4>';
            
            currentExercise.bets.forEach(bet => {
                explanation += `<p><strong>${bet.quantity} ${betTypes[bet.type].name}${bet.quantity > 1 ? 's' : ''}:</strong> ${bet.quantity} × ${bet.payout} = <span style="color: #4caf50;">${bet.total}</span></p>`;
            });
            
            explanation += `<hr style="margin: 15px 0; border-color: #ffd700;">`;
            explanation += `<p><strong>Total:</strong> ${currentExercise.bets.map(bet => bet.total).join(' + ')} = <span style="color: #ffd700; font-size: 1.2em;">${currentExercise.totalPayout}</span></p>`;
            
            explanationDiv.innerHTML = explanation;
            explanationDiv.style.display = 'block';
        }

        function hideResult() {
            document.getElementById('result').style.display = 'none';
            document.getElementById('explanation').style.display = 'none';
        }

        function updateStats() {
            document.getElementById('score').textContent = stats.score;
            document.getElementById('streak').textContent = stats.streak;
            document.getElementById('level').textContent = stats.level;
            
            const accuracy = stats.totalQuestions > 0 ? Math.round((stats.correctAnswers / stats.totalQuestions) * 100) : 100;
            document.getElementById('accuracy').textContent = accuracy + '%';
            
            const avgTime = stats.totalQuestions > 0 ? (stats.totalTime / stats.totalQuestions).toFixed(1) : 0;
            document.getElementById('avgTime').textContent = avgTime + 's';
            
            // Animación de pulso en la puntuación
            if (stats.streak > 0) {
                document.getElementById('streak').parentElement.classList.add('pulse');
                setTimeout(() => document.getElementById('streak').parentElement.classList.remove('pulse'), 2000);
            }
        }

        function resetStats() {
            if (confirm('¿Estás seguro de que quieres reiniciar todas las estadísticas?')) {
                challengeActive = false;
                clearInterval(timerInterval);
                
                stats = {
                    score: 0,
                    streak: 0,
                    level: 1,
                    totalQuestions: 0,
                    correctAnswers: 0,
                    totalTime: 0,
                    bestScore: stats.bestScore,
                    records: stats.records
                };
                
                questionCount = 0;
                updateStats();
                generateNewExercise();
                
                document.getElementById('startChallengeBtn').textContent = '🚀 Iniciar Desafío';
                document.getElementById('startChallengeBtn').onclick = startTimedChallenge;
                document.getElementById('timerConfig').style.opacity = '1';
            }
        }

        function toggleLeaderboard() {
            const leaderboard = document.getElementById('leaderboard');
            leaderboard.classList.toggle('active');
            
            if (leaderboard.classList.contains('active')) {
                displayRecords();
            }
        }

        function displayRecords() {
            const recordsList = document.getElementById('recordsList');
            recordsList.innerHTML = '';
            
            if (stats.records.length === 0) {
                recordsList.innerHTML = '<p style="text-align: center; color: #888;">No hay records aún</p>';
                return;
            }
            
            stats.records.forEach((record, index) => {
                const recordItem = document.createElement('div');
                recordItem.className = 'record-item';
                recordItem.innerHTML = `
                    <span>${index + 1}. ${record.date} (${record.mode})</span>
                    <span>${record.score} pts - ${record.accuracy}% - ${record.avgTime}s</span>
                `;
                recordsList.appendChild(recordItem);
            });
        }

        // Event listeners
        document.getElementById('answer').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                if (!document.getElementById('checkBtn').disabled) {
                    checkAnswer();
                }
            }
        });

        // Inicializar el juego
        generateNewExercise();
        updateStats();
    </script>
</body>
</html>
